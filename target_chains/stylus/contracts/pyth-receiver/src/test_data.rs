use alloy_primitives::U256;
use hex::FromHex;

fn from_cairo_byte_array_data(data: &[U256], num_last_bytes: usize) -> Vec<u8> {
    let mut result = Vec::new();
    
    if data.is_empty() {
        return result;
    }
    
    for (i, &item) in data.iter().enumerate() {
        let buf = item.to_be_bytes::<32>();
        
        if i == data.len() - 1 {
            if num_last_bytes > 0 {
                let start_idx = 32 - num_last_bytes;
                result.extend_from_slice(&buf[start_idx..]);
            }
        } else {
            result.extend_from_slice(&buf[1..]);
        }
    }
    
    result
}

pub fn good_update1() -> Vec<u8> {
    let hex_str = "504e41550100000003b801000000040d0216f3809b6396fdb0708bc94515ddb96a3bc8fb1993916e74f522ab4c34a268836a0bb38786303b55cc40ecb50d18c92bf9fd61688a143f3d24a73a3f468e4ab0000365be4f3a330fe96bab246922d9fa4816a865dec40d7c522e37f7e3605673b8f52eb30a4dad7aee3e1ac4b21337b8831c6147ef6e359e843b307872e83b5c7fe80004b6f12766eb395d04bdb146b1b69a4b9a8831a9c9ea20ee841d55efe72c629aef17038b925584493af7882981260b09587d73b6463415f4e1f8fb0a2a2c959c8301065c18a776cf558e43494bf31dd26ac0e3aed07a01ca0063abcfca3736b892368e4bf8b957f2d2e83ff9eb3fa8f667ef97a5f48c286103f70fda4a72e077719a0200085896c930febfb864a8c292bde679092e386e53389cb2d26bd12ceed64d22c0cd27676dc5c46d3e3c5949abbce89d4cc5ec378cfbf9ab1b0c24cfeb3371df4864000a1c67e67adea9f8a71eee76765f1fe4c7d9539d21b62d0336513692897cc6acbe1c827599a1f8c73b7478e8d788443b4cfd4e373344ab1ac9f771c9c494124863000b7e08e1cc1291340e6ec7d1b04c6a9c63f74077a074ee68edf4f95cf24c9743620f8abc8213884c8e4848fb76ec319d365e0cdc746a6e534a4cb828e51719be79010c61a2fedeedf34e4c80624d80cb93e24bafe9f6d23339173004d84e61c2395bfb5f552e87b901beb192ba6f4fc905eae30317c52b8614071e08a265592f24e8de000de38d08612edc5ebc863ea5a96325cb991750a94ff0e50f86bc322cce81db7cd17cb4ed3703f7477eb111a9d881e1345f5b79d618814f31b46034196563ee6a18000e5b11510d585a2decaba0be9e71386865b6069061478f7254d7852d55116569eb426c385267e40264d16db08e0f1a9e2c44b7d1c926d3c3ba662b212572386483010fa1ad0278402104b146b6f4d1cf85ac4df961d24eea0c7948b700f9973596cad130abfff25feef37125ba38507f34308d967455651e7014e40264a0c6510d3af001101f2e4e70868d6c327c92229537f1ffa33e488da3140ccc086f8210b437b162190742bd01ad1cb495a93f20045b4bb47e1562fdd82a8a1548d87d788a492b17190111847f5095df3edefc58be0956aee19876e850516e132506fd67504afee3c8cf240f07fb607b3c8282a2e56dcad23959e6759bdf8ad345ba8150448da56ff34fcc016866baf800000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa71000000000880cea9014155575600000000000d8e5c8d0000271085e6ab1bb044f57c4cd6c1d32aa0a82a5032198301005500e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43000009f9828e420300000001284f2da6fffffff8000000006866baf8000000006866baf8000009f3b955a26000000001062cb8780c1283a49180b4986f0dec3c746d3daeb597887747b8f66a09876e1253a1ebb8a6bc4a5793daaa343db6057b82ec29715d7e1db0ffd6db523f7b80b03e3866ef5f5c80728801b92f5acecc28d8517e5615335d89c553f94b4370f3a20be0bc23e0fd401c4e5bd8bd32948a26233fc48f116428a490f087030ccfc442753e3074e2b9bbc1c61a009d86aaa200645c627a6b7f2f6597e34c60b14a58ef2583bcbb1d0e21b71a264fad2648ecc545031c7ed598772ffe875bf94a488389a49e6025e1b2a1f07ec598d0d9aa8ef7dd2733c8502c49d1d1323f1ae664e82e8a5e14978d52ab448ba9b1afc78f06c8cd17415a17";
    let bytes = Vec::from_hex(hex_str).expect("Invalid hex string");
    bytes
}

pub fn multiple_updates() -> Vec<u8> {
    let hex_str = "504e41550100000003b801000000040d02e57b0f291daa4d2f02f5c4a18793b278b238338f472d17897f8f0866549f77571cfe71fa55bae7f340b9124511559b73a0cf01c72adc8a8d9963cebecc5a503801039507a96b155046ab039f7c9cad17a4927e2ff34763bca9b65d572ddc7a5f019832ffbeeb5295447bfdb989efa0314865bb4571770ad8e75ae7a083288d6de232010412e7333ab5cf0f20274b0907da43b52016d5a095bb846962d13a222e4af1e7e63f7a8db49de04feb70f07a0e274dc58acc7a4c386a099369412c6813ba39916100063da672f75cf1d397829a39461e311ca366366828be8d12b19a00c552e7c8c5e7746b36d97dccc54e5b3aeae188b372ec885dc1fbd9c2285ce458764c86f0c1bb0008863aa237e9fe339683992121249a2e520b6483a3b3b60c703a1eb09ef33266312e729ff6d398e1a60be8474a95803cd1641ef6c1de2c74f3cd7e1f2510c919f9000a3bd5ec58424b21c48552c3be0f9cccd6e6c641eee2b4e550fb88cc93cfdf10c7409344ec3e81df711a293baba565a85e620d20028d9738e53939fa52f19ce622010b000f803511f89f02610fbece34fe327afb55196cc3e522bb28d71d6e4d5523ac77ca1afbbd8a28b4fe05c7f2aa1c3f428c89fe21096ba67bc505cbfa6ead9808010c315b34c9cac03647df4e12a050f8b739763498aa23999244036e09010e2a79a46d0cbabc22c535542896bc22df05dc5480db06a370dffeb0814424870fd50c21000d4a562686000b65df4e0ca00d2e00d10db9e913b481337ee1c80bb47b25553afb693d7be0c17f6fb106909a1eed52a6c27739471b719d4c450b99b066a02bd2c9010e309508bc7128030ca4b19fc34c0ee0e62eebb549c759c2e8ccfdf062793e41e935754ae1d5356ba98446fa2eaa837ae4b413d1ccdf1af6d9060a2885f18c19e1010f3e2ff50704a6ad1b491cb93a1e4678c0f58b91540ba3ce3b4424c96abbe922562c924debb3336ab2fe835237f16912d768e6e5b739f2ab44b57a1e2607c9bb89001070d0dfac758a38342b107870b4d5761df9e785c6be589317c4b1dad3c08998f11214c29201d172b278aa6f4d57171f0f05fb7a2718e6da6df4449e8897c0c2ac0011d9e885989fa2363ec311bf4e9ebd8738d4b3ecaf9a31c09ce06f9876c3ab772034c1df9ca09c847ee81de80a1f0f8592019fa60e55b02b657b8a7c99bee04701016866e28300000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa710000000008812f80014155575600000000000d8ebd6500002710f015dfd43b23aad91dcd4a7a8a113ed2d39233f202005500e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43000009fee44efa2300000000e7f6ffe3fffffff8000000006866e283000000006866e283000009fb4f364d0000000000e98d2f400c2704dab60f1b310d567acb60d77a3ce8003a6f564e8e1f567f00f004381d755e160a07372977a99288dcc9c9477cf9c1bb095403b514082aa774f7b243003e30548cbd97e8191d5ef2732796e06f84f05543a171f1e66052aa515c41a2d994a0d13e2e4016e6a28823201a52d408a5024797ec4b7629406062dd9ccc30a5d1eb4ac8b4a28a3d464bf4335ceda7646e03c29cc24b6c7c5e5924e6e69400a2c90561c9a2e4555084af13fbc7eaa0a884b75d4d1197933ac174b62c4b9b1cde3dd496f5e54cd2e01cdca0ba5c5a80a2bbd0d9d5dfb7aab5b638ef883e4e55f78a1536fe79c5c3e16cda9b53e364e3bbe95f005500ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace0000003c480c0e980000000009727f59fffffff8000000006866e283000000006866e2830000003c3597da300000000007d3439a0ccf5f10d7559e184107e994663aa0fc8f81718c0b281162b77eb09c774da30e2db5674df62494b3da820f6c986a0f32d1a195b6bc4676891d4e28cdb4e2f09dd47db3243547b37bdbb9799c82a42d6f1f18f8e17d7bed68408ef26e184f21e9b640e2c9f0416d91987acbe6fa8e72c2c99fa548f83c0eb5dd3c269ef52101521ef0b3d26f50b07dae68311bd138338881b20b78f8d21d2bfc27e9ac849b4c659d61c9a2e4555084af13fbc7eaa0a884b75d4d1197933ac174b62c4b9b1cde3dd496f5e54cd2e01cdca0ba5c5a80a2bbd0d9d5dfb7aab5b638ef883e4e55f78a1536fe79c5c3e16cda9b53e364e3bbe95f";
    let bytes = Vec::from_hex(hex_str).expect("Invalid hex string");
    bytes
}

pub fn good_vm1() -> Vec<u8> {
    let bytes = [
        U256::from_str_radix("1766847066033410293701000231337210964058791470455465385734308943533652138", 10).unwrap(),
        U256::from_str_radix("250126301534699068413432844632573953364878937343368310395142095034982913232", 10).unwrap(),
        U256::from_str_radix("374780571002258088211231890250917843593951765403462661483498298003400611238", 10).unwrap(),
        U256::from_str_radix("23190137343211334092589308306056431640588154666326612124726174150537328574", 10).unwrap(),
        U256::from_str_radix("238750269065878649216923353030193912502813798896051725498208457553032584635", 10).unwrap(),
        U256::from_str_radix("29844190303057534696518006438077948796328243878877072296680853158289181326", 10).unwrap(),
        U256::from_str_radix("106329507856770018708432343978518079724691760719405501795955774399597471533", 10).unwrap(),
        U256::from_str_radix("50779865592261858016477142415230454208001695486195806892438697217059319645", 10).unwrap(),
        U256::from_str_radix("448669871976126446102256476358498380455807705600424321390063431836375575318", 10).unwrap(),
        U256::from_str_radix("115682669871397824853706713833773246708114483862317474710603223566297521279", 10).unwrap(),
        U256::from_str_radix("301634766618012930739391408723909107532790832406455099966028276947414082504", 10).unwrap(),
        U256::from_str_radix("104473166230846104217366042152018649207811514257244625711402436055500423094", 10).unwrap(),
        U256::from_str_radix("64445621634231668761998815864645440965239569561546522651415024970517905416", 10).unwrap(),
        U256::from_str_radix("192317190225976528694195501079591384434869624408066864018183189813956862386", 10).unwrap(),
        U256::from_str_radix("289982656017597431343118552054719821766658675456661448685110903889153449006", 10).unwrap(),
        U256::from_str_radix("218840601196095059731241556733624112758673153548932709011933806481899680620", 10).unwrap(),
        U256::from_str_radix("430933799927481265070475198137531816946660368757134588278434352703899277070", 10).unwrap(),
        U256::from_str_radix("69322998883710289192076494057541346430050879299268159627180404869988632073", 10).unwrap(),
        U256::from_str_radix("23862615839737051269352321086490452186237833007444069999578906611768140646", 10).unwrap(),
        U256::from_str_radix("444634264607471510688862284107804392707600799506487897206707262445172121289", 10).unwrap(),
        U256::from_str_radix("438038196736233160320436150616293672539386464061037100698335568417587662951", 10).unwrap(),
        U256::from_str_radix("4682255185797880874381673193118803274635247527626050223938224759013169366", 10).unwrap(),
        U256::from_str_radix("337620725992972686809095065321563509600769533202700218393281926304544120094", 10).unwrap(),
        U256::from_str_radix("106657917096532484607371891267699639824731774168349872862335217581425289654", 10).unwrap(),
        U256::from_str_radix("71240348385993236445536577509595968468284689483611375124653855125285401592", 10).unwrap(),
        U256::from_str_radix("347603391821038175842934311068097986460257977131947418186118379296987051086", 10).unwrap(),
        U256::from_str_radix("414263571545410645948841360836383289766662078574048514890988877286444618669", 10).unwrap(),
        U256::from_str_radix("250301638008739107522011802538487063969565433276260914336890309092111026583", 10).unwrap(),
        U256::from_str_radix("43192785595291340058788190601908070333310658291317702311902081", 10).unwrap(),
        U256::from_str_radix("52685537088250779930155363779405986390839624071318818148325576008719597568", 10).unwrap(),
        U256::from_str_radix("14615204155786886573933667335033405822686404253588533", 10).unwrap(),
    ];
    from_cairo_byte_array_data(&bytes, 22)
}

pub fn test_price_update1() -> Vec<u8> {
    let bytes = [
        U256::from_str_radix("141887862745809943100421399774809552050876420277163116849842965275903806689", 10).unwrap(),
        U256::from_str_radix("210740906737592158039211995620336526131859667363627655742687286503264782608", 10).unwrap(),
        U256::from_str_radix("437230063624699337579360546580839669896712252828825008570863758867641146081", 10).unwrap(),
        U256::from_str_radix("3498691308882995183871222184377409432186747119716981166996399082193594993", 10).unwrap(),
        U256::from_str_radix("1390200166945919815453709407753165121175395927094647129599868236", 10).unwrap(),
        U256::from_str_radix("222819573728193325268644030206737371345667885599602384508424089704440116301", 10).unwrap(),
        U256::from_str_radix("341318259000017461738706238280879290398059773267212529438772847337449455616", 10).unwrap(),
        U256::from_str_radix("1275126645346645395843037504005879519843596923369759718556759844520336145", 10).unwrap(),
        U256::from_str_radix("363528783578153760894082184744116718493621815898909809604883433584616420886", 10).unwrap(),
        U256::from_str_radix("301537311768214106147206781423041990995720118715322906821301413003463484347", 10).unwrap(),
        U256::from_str_radix("83150006264761451992768264969047148434524798781124754530141755679159432208", 10).unwrap(),
        U256::from_str_radix("96387772316726941183358990094337324283641753573556594738287498821253761827", 10).unwrap(),
        U256::from_str_radix("395908154570808692326126405856049827157095768069251211022053821585519235652", 10).unwrap(),
        U256::from_str_radix("87135893730137265929093180553063146337041045646221968026289709394440932141", 10).unwrap(),
        U256::from_str_radix("245333243912241114598596888050489286502591033459250287888834", 10).unwrap(),
    ];
    from_cairo_byte_array_data(&bytes, 25)
}

pub fn test_price_update2() -> Vec<u8> {
    let bytes = [
        U256::from_str_radix("141887862745809943100421399774809552050874823427618844548942380383465221086", 10).unwrap(),
        U256::from_str_radix("106893583704677921907497845070624642590618427233243792006390965895909696183", 10).unwrap(),
        U256::from_str_radix("126617671723931969110123875642449115250793288301361049879364132884271078113", 10).unwrap(),
        U256::from_str_radix("3498691308882995183871222184377409432186747119716981166996399082193594993", 10).unwrap(),
        U256::from_str_radix("1390200461185063661704370212555794334034815850290352693418762308", 10).unwrap(),
        U256::from_str_radix("419598057710749587537080281518289024699150505326900462079484531390510117965", 10).unwrap(),
        U256::from_str_radix("341318259000017461738706238280879290398059773267212529438780607147892801536", 10).unwrap(),
        U256::from_str_radix("1437437604754599821041091415535991441313586347841485651963630208563420739", 10).unwrap(),
        U256::from_str_radix("305222830440467078008666830004555943609735125691441831219591213494068931362", 10).unwrap(),
        U256::from_str_radix("358396406696718360717615797531477055540194104082154743994717297650279402646", 10).unwrap(),
        U256::from_str_radix("429270385827211102844129651648706540139690432947840438198166022904666187018", 10).unwrap(),
        U256::from_str_radix("343946166212648899477337159288779715507980257611242783073384876024451565860", 10).unwrap(),
        U256::from_str_radix("67853010773876862913176476530730880916439012004585961528150130218675908823", 10).unwrap(),
        U256::from_str_radix("370855179649505412564259994413632062925303311800103998016489412083011059699", 10).unwrap(),
        U256::from_str_radix("1182295126766215829784496273374889928477877265080355104888778", 10).unwrap(),
    ];
    from_cairo_byte_array_data(&bytes, 25)
}

pub fn pyth_set_fee() -> Vec<u8> {
    let bytes = [
        U256::from_str_radix("1766847064779993955862540543984267022910717161432209540262366788014689913", 10).unwrap(),
        U256::from_str_radix("322968519187498395396360816568387642032723484530650782503164941848016432477", 10).unwrap(),
        U256::from_str_radix("49565958604199796163020368", 10).unwrap(),
        U256::from_str_radix("8072278384728444780182694421117884443886221966887092226", 10).unwrap(),
    ];
    from_cairo_byte_array_data(&bytes, 23)
}

pub fn pyth_set_data_sources() -> Vec<u8> {
    let bytes = [
        U256::from_str_radix("1766847064779993795984967344618836356750759980724568847727566676204733945", 10).unwrap(),
        U256::from_str_radix("319252252405206634291073190903653114488682078063415369176250618646860635118", 10).unwrap(),
        U256::from_str_radix("223938022913800988696085410923418445187967252047785407181969631814277398528", 10).unwrap(),
        U256::from_str_radix("301", 10).unwrap(),
    ];
    from_cairo_byte_array_data(&bytes, 14)
}

pub fn create_realistic_price_update_test() -> Vec<u8> {
    test_price_update1()
}

pub fn create_realistic_vaa_test() -> Vec<u8> {
    good_vm1()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_conversion_logic() {
        let test_data = [U256::from(0x010203u32)];
        let result = from_cairo_byte_array_data(&test_data, 3);
        assert_eq!(result, vec![0x01, 0x02, 0x03]);
    }

    #[test]
    fn test_good_update1_not_empty() {
        let data = good_update1();
        assert!(!data.is_empty());
        assert!(data.len() > 100);
    }

    #[test]
    fn test_test_price_update1_not_empty() {
        let data = test_price_update1();
        assert!(!data.is_empty());
        assert!(data.len() > 100);
    }

    #[test]
    fn test_good_vm1_not_empty() {
        let data = good_vm1();
        assert!(!data.is_empty());
        assert!(data.len() > 50);
    }
}
