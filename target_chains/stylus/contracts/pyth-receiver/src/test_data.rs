use alloy_primitives::{address, Address, I32, I64, U64};
use hex::FromHex;
use std::vec;

#[cfg(test)]
pub fn good_update1() -> Vec<Vec<u8>> {
    // 0xa6320c8329924601f4d092dd3f562376f657fa0b5d0cba9e4385a24aaf135384
    let hex_str = "504e41550100000003b801000000040d02cfb65be46a822da31643f7bcce6c632943a0c9bab25872525c640ec1d803832936e560a4d6344c1e98f8fe2714281f882b25bc3e1f5fd3db51a9eae49afe2fb401030f87f6065777bffb27594235323e6680ec24b953ec71f0e0e3708ff28986613b2351aba32024ea226585f90c0a2680ee40786a1978b99596af6c281a947b87bc010492608d288aeaa7393d625111da17271178e739392ac87334b01388897612e63176754d044740d80f8f5511cb92c9925592ca223f8eeea70153ccac10f4f2faee0106944014d7f07eb277fe6cd5b4adf65ec547971ab43cb56a507cb974a059cf5b623e838cb899b2401efdac1d352aabab8d4c737519611f4ae22be6addfb254002c0108e9a6f762c22e639302495af910bf305269f38460360ef32cc4e5b1369d599bd33343d56a8e9b392a8cabfd9fc31bbfa32c03433d14f7b7ecdb1975e9759f3e51010ab4322508f35ca75320715c91ed4bf1b07e89730452e3c25b78469646ea61cdc27e52030b2baed4c91b24c3fa13816d95f70095d6c6cc2e110aaf92bab7e816f7010b48e2366bfbccd42b6b790d618bbe3bae90507be6ffda461a7a42ae19f674e16d359c5743540557f401ba7d33f401d5489d0933c3c6253528d1f9c7df3c51dc11010dcc82f54596cd7fc8dac985d4d1bbe410c82f1846891077783ea8da7522725f4621b51d2c09c008826e70f5b52098669d9a872de47d8544867dc381be6e10af04000eb240c11adf380871403a158fc5ce4482629ae1ca2e8b3ab6e7cf02e20435400d065a6399a49ede59db3ad05e56d5f4d4cfcc2419ce2b21dfd2c6dc955539c66d010f93cf0f4e8db5c1467b72c4d188c3c84faeab9dcb5936c2a4a8e80c8bebe8cbc75bd757243af5f109824e5afb1cafd6995c587cc0714fff8c92b1c109a7f4644d0110a89b1ccda9b5e70e823c259ef21b09ef5dcb3e0599033abdf179292f7395e62f3aead157a15d95377dfec08656f6b3f71e68e7ea8da185c38c6f84e50beb79a8001129768f9183799b4bad3b96953ea53b7ee269cd6763b56051b0fcd93e9f6b62325a811abc9d8d401c3971b864a4a9e1910f3ad6980fccd078b36399df46bd291c00121e92dc37fb15d26237137088d139d6decbb1e1d08a7e2a2acf92eaef9cbd7a93738c702ca0faa0b7764b5a28b4ffe41febeb9c2d62706844e69831b58902d88000686fff8a00000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa710000000008976df2014155575600000000000da4fc6f000027106529465b0781218c3d940e5d11cebff0bc1ef15401005500a6320c8329924601f4d092dd3f562376f657fa0b5d0cba9e4385a24aaf1353840000000000635f4b0000000000005117fffffff800000000686fff8a00000000686fff8a00000000006202080000000000003a710c1957911bdae55923e5b2b971a731b10567748efab84bef5a2e1ac6fbfadd24896a2d225c77a260f03b06cb7c34c3ed018d02ac3fc7eefa997ffc91dc3b50508fb4b11c6c7768bc93dd3abeaf5d912ff895be0136780546fbb2f8b42855afa013d38675d811ab3118f0b0eea13dfd64ceb16649747908f859be12f8116922a05ad919df2bca555e5177ec70ab85278ad68b057e6fdbfe50bc38c3796c43199310760180b3253701d4293f32dc1e9be7f10dc3bf2bbf60ffe85b4e0b9ba3cf87af3c472f5d0372cdec973f4ddee17e89255df7d55bea696c64c7af6e8efd51ec79d1870f4d19bc4d5c65f24bdccd341a7d";
    let bytes = Vec::from_hex(hex_str).expect("Invalid hex string");
    vec![bytes]
}

#[cfg(test)]
pub fn good_update2() -> Vec<Vec<u8>> {
    // 0x879551021853eec7a7dc827578e8e69da7e4fa8148339aa0d3d5296405be4b1a
    let hex_str = "504e41550100000003b801000000040d02f11b16ae1042344f3c25ea3738f48985f16ed9ebd2e6a21c0b3ffc95f47f327d0afabe6c452b65ec71345b84ce9efb933c77c76285cb43c50bdc7c8fb6bef58d01036c7d8bb399c1fb786cf9ead5d604d4b8739f477a5d4a543ebec13309cdbc28926b4b1a84447431e818576f129d3c1a0ac42f43a4f6cc98607a8ab9173116714c0004181f8d49fc6d4943ccce639da721ccea067e049cf2be33dd4c002ec2185993ba498006814f42b8d949fe95fa1c39ff899ba694902ca0d60ad2cd6fbd86642bea0006f9bc4c86125c6ea76637f4e9afb7c4fe1b1f7669ad6454f7af2b1964cc11b7ec754709960ac5eb9165bba6e54482c9c2835ee67c99f4a1694cdfd05811c0c3630108b6805cd6aa6bd074a59bfe68c10016bc7acbbf61ca936fa1356ecd782493cb4f328964a4055938c77646cbdfc7487be8ded6f285507ba986f39c3aa584be3b67010a32f69176149696a1b503434c25456a41dd86582c5f07f305d9f3b4b14cb3eea30045e996df3fc016e9213e19b5f19a2896cd8c9aa52ba931cedc6f3672c92856010b55e38782b6df0e1926ac5708e0bd60a7f85fee986d54544a683eb8d0855d1d485a96066f773951d6106098bfdcb1c1ae8165bed84126a539747633c87a9e6cb0010d5b5d539c768dba043adb35641b5e7b1e14e30ddd3db2cb4d3b2ee540c5db04cd0eb244ad60a9fbeac1555795c1377e2e3cae70961e241e499a3404cdc7358662000e553a69464feeceb4be71ac5a55b50f60403f23d764debfdc002edef342c927fc6c161a4eebc6be95e014fcda76c537335578228a206b9715b57747a65335b9bd010f3e4971a7f76c0e7160bf236d9a62af81735f25f4067a31b836c36608073b1cf35c918b30c03bbfa2c30de7ad54bcd293f38ac7d360efe9079590e81d2b4affe00110d812f635ebb9b8faeee88405469a554792ddfcc3353137cb820c361c893b2fbf4a7a308194be096e00d3514449c3bbf3c638a6af92962cc30bf0323f0dd535cb011106306af0986424de86434aaba4dc11ce5e08a1a15722c065dd4fa3ca36d5859230e0eea8cc74b31fc024f025956121374f1354a742eec364cdf0079ca885e39d01123dc4dcfae02cbd590e7a4d85a07b2e9a107ffb95fed0c843af6b7b884eddc8d05925fb1d271e2bf3c41970d9f83bfd82cefc7d45c143c7595352ced45bd2dbef016870024200000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa71000000000897747c014155575600000000000da502fd000027102a19430cad54e27fe63ae1b4743caf77ff8ed43c01005500a6320c8329924601f4d092dd3f562376f657fa0b5d0cba9e4385a24aaf135384000000000062b4b2000000000000324bfffffff8000000006870024200000000687002420000000000622f4000000000000038df0c1c5dde54a2e342f851ea9041fafbcd1a6b2f1b76d54a4216f1d2441a666411a011ce756da5bf4b599f7faa456612f1810aa04f46e929405e6fd2704f4576157213ea8a656558e788f104832754f6ae3a5481df8f57e0f6ab6043a5de784086ce07e102ad4eb961b86e29ede26cd32a7dff934b7848844b4eb75f109aa8f1c411a4d2c23413fdb33a260c913c3a35df074c9a2590e8513caa5400001c9abe9a640200d17f8f18307c1d757dd8fa7aac510b57ed3cccaeba6f36e6ea506783cfb726d644e8b9f19dcb1e599ced6dd9a3b558e83124753869d08dd7fa85568c579dc2a4b9bdd0e7876994aa18cc8a57eecb";
    let bytes = Vec::from_hex(hex_str).expect("Invalid hex string");
    vec![bytes]
}

#[cfg(test)]
pub fn good_update1_feed_id() -> [u8; 32] {
    let hex_string = "a6320c8329924601f4d092dd3f562376f657fa0b5d0cba9e4385a24aaf135384";
    let bytes_vec = hex::decode(hex_string).expect("Invalid hex string");

    let byte_array: [u8; 32] = bytes_vec
        .try_into()
        .expect("Hex string must decode to exactly 32 bytes");
    byte_array
}

#[cfg(test)]
pub fn multiple_updates_first_feed_id() -> [u8; 32] {
    [
        0xe6, 0x2d, 0xf6, 0xc8, 0xb4, 0xa8, 0x5f, 0xe1, 0xa6, 0x7d, 0xb4, 0x4d, 0xc1, 0x2d, 0xe5,
        0xdb, 0x33, 0x0f, 0x7a, 0xc6, 0x6b, 0x72, 0xdc, 0x65, 0x8a, 0xfe, 0xdf, 0x0f, 0x4a, 0x41,
        0x5b, 0x43,
    ]
}

#[cfg(test)]
pub fn multiple_updates_second_feed_id() -> [u8; 32] {
    [
        0xff, 0x61, 0x49, 0x1a, 0x93, 0x11, 0x12, 0xdd, 0xf1, 0xbd, 0x81, 0x47, 0xcd, 0x1b, 0x64,
        0x13, 0x75, 0xf7, 0x9f, 0x58, 0x25, 0x12, 0x6d, 0x66, 0x54, 0x80, 0x87, 0x46, 0x34, 0xfd,
        0x0a, 0xce,
    ]
}

#[cfg(test)]
pub fn multiple_updates_diff_first_feed_id() -> [u8; 32] {
    [
        0x3f, 0xa4, 0x25, 0x28, 0x48, 0xf9, 0xf0, 0xa1, 0x48, 0x0b, 0xe6, 0x27, 0x45, 0xa4, 0x62,
        0x9d, 0x9e, 0xb1, 0x32, 0x2a, 0xeb, 0xab, 0x8a, 0x79, 0x1e, 0x34, 0x4b, 0x3b, 0x9c, 0x1a,
        0xdc, 0xf5,
    ]
}

#[cfg(test)]
pub fn multiple_updates_same_vaa() -> Vec<Vec<u8>> {
    let hex_str = "504e41550100000003b801000000040d02e57b0f291daa4d2f02f5c4a18793b278b238338f472d17897f8f0866549f77571cfe71fa55bae7f340b9124511559b73a0cf01c72adc8a8d9963cebecc5a503801039507a96b155046ab039f7c9cad17a4927e2ff34763bca9b65d572ddc7a5f019832ffbeeb5295447bfdb989efa0314865bb4571770ad8e75ae7a083288d6de232010412e7333ab5cf0f20274b0907da43b52016d5a095bb846962d13a222e4af1e7e63f7a8db49de04feb70f07a0e274dc58acc7a4c386a099369412c6813ba39916100063da672f75cf1d397829a39461e311ca366366828be8d12b19a00c552e7c8c5e7746b36d97dccc54e5b3aeae188b372ec885dc1fbd9c2285ce458764c86f0c1bb0008863aa237e9fe339683992121249a2e520b6483a3b3b60c703a1eb09ef33266312e729ff6d398e1a60be8474a95803cd1641ef6c1de2c74f3cd7e1f2510c919f9000a3bd5ec58424b21c48552c3be0f9cccd6e6c641eee2b4e550fb88cc93cfdf10c7409344ec3e81df711a293baba565a85e620d20028d9738e53939fa52f19ce622010b000f803511f89f02610fbece34fe327afb55196cc3e522bb28d71d6e4d5523ac77ca1afbbd8a28b4fe05c7f2aa1c3f428c89fe21096ba67bc505cbfa6ead9808010c315b34c9cac03647df4e12a050f8b739763498aa23999244036e09010e2a79a46d0cbabc22c535542896bc22df05dc5480db06a370dffeb0814424870fd50c21000d4a562686000b65df4e0ca00d2e00d10db9e913b481337ee1c80bb47b25553afb693d7be0c17f6fb106909a1eed52a6c27739471b719d4c450b99b066a02bd2c9010e309508bc7128030ca4b19fc34c0ee0e62eebb549c759c2e8ccfdf062793e41e935754ae1d5356ba98446fa2eaa837ae4b413d1ccdf1af6d9060a2885f18c19e1010f3e2ff50704a6ad1b491cb93a1e4678c0f58b91540ba3ce3b4424c96abbe922562c924debb3336ab2fe835237f16912d768e6e5b739f2ab44b57a1e2607c9bb89001070d0dfac758a38342b107870b4d5761df9e785c6be589317c4b1dad3c08998f11214c29201d172b278aa6f4d57171f0f05fb7a2718e6da6df4449e8897c0c2ac0011d9e885989fa2363ec311bf4e9ebd8738d4b3ecaf9a31c09ce06f9876c3ab772034c1df9ca09c847ee81de80a1f0f8592019fa60e55b02b657b8a7c99bee04701016866e28300000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa710000000008812f80014155575600000000000d8ebd6500002710f015dfd43b23aad91dcd4a7a8a113ed2d39233f202005500e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43000009fee44efa2300000000e7f6ffe3fffffff8000000006866e283000000006866e283000009fb4f364d0000000000e98d2f400c2704dab60f1b310d567acb60d77a3ce8003a6f564e8e1f567f00f004381d755e160a07372977a99288dcc9c9477cf9c1bb095403b514082aa774f7b243003e30548cbd97e8191d5ef2732796e06f84f05543a171f1e66052aa515c41a2d994a0d13e2e4016e6a28823201a52d408a5024797ec4b7629406062dd9ccc30a5d1eb4ac8b4a28a3d464bf4335ceda7646e03c29cc24b6c7c5e5924e6e69400a2c90561c9a2e4555084af13fbc7eaa0a884b75d4d1197933ac174b62c4b9b1cde3dd496f5e54cd2e01cdca0ba5c5a80a2bbd0d9d5dfb7aab5b638ef883e4e55f78a1536fe79c5c3e16cda9b53e364e3bbe95f005500ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace0000003c480c0e980000000009727f59fffffff8000000006866e283000000006866e2830000003c3597da300000000007d3439a0ccf5f10d7559e184107e994663aa0fc8f81718c0b281162b77eb09c774da30e2db5674df62494b3da820f6c986a0f32d1a195b6bc4676891d4e28cdb4e2f09dd47db3243547b37bdbb9799c82a42d6f1f18f8e17d7bed68408ef26e184f21e9b640e2c9f0416d91987acbe6fa8e72c2c99fa548f83c0eb5dd3c269ef52101521ef0b3d26f50b07dae68311bd138338881b20b78f8d21d2bfc27e9ac849b4c659d61c9a2e4555084af13fbc7eaa0a884b75d4d1197933ac174b62c4b9b1cde3dd496f5e54cd2e01cdca0ba5c5a80a2bbd0d9d5dfb7aab5b638ef883e4e55f78a1536fe79c5c3e16cda9b53e364e3bbe95f";
    let bytes = Vec::from_hex(hex_str).expect("Invalid hex string");
    vec![bytes]
}

#[cfg(test)]
pub fn multiple_updates_diff_vaa() -> Vec<Vec<u8>> {
    let hex_str_update_1 = "504e41550100000003b801000000040d0168bad50bb1470e136368ebadeb842cf5256547a30cd65c320a0e476bca15f204326806e4290c004925040f5eea31592c55341936fe7e7537d7b4172f308fc79701033b17478509bf096ebc6107afaaf9f339f68d3ad7ebd9267585cd945b91c93f687550c07d4526dc6f2ad0335c1e849977d91d2e61be04d746a611b444af272a9f0104ce96c5a8d9e4e869c2b7ae54980bf9f315af3d93fe827a346b3b55041e019e982350498c7094c77f09567cd3f2a9961940e304666fb08bfbfac7aa1a6ec157cf010639036dea5439380e1c946f76f06480965b60edf280272ab7f649840e289e3d740e4822619e5608811c66158d22ccdea633961687b3afec2751a53a37b3fd6f4a010a370bf667e0fd0b6df27ae87e94513740d1581ca9eadc15b049b5ce4d96b57ba85f92a7bdc478fde36efd7ab80674048589421fc2644457d7b4e398bc1b5c01f0010bb5ef6559a20289cf9df4a8c076baecd3d8e3567973acf975ee52d0301b8cbddd7bb2e4348fb59020bae2caefd57945cf1107cff7f5fd068079fa59ea27e0e702000cae84bce54e40a0583d8c957ddab0388d053a85622cd83c3de49e4bc4acf515351e118f4c36b903f09fe3afd7ce5499c73c37e80d742fdfbb1a57d7f442f915f7000d90c05b57e9592b303305b0e2a88b05f5b006a5f911ac9feba74c309acbfc3af8270b4d8c0759677db601af1893ec4523f023ee6810070148cd017ca2fe2d5663010e17a7472d37425d9f1505e998736d4138f6f35c620c195340ef87ca0d155cf3aa12fe9c0a9c6341411734dacbc53e36895efa69c9895d682bc6329294a49fd928000fed2cb761a8837d87cf827141eedfeafd1901e38957930bf56cc044ebf2c34e3e06bd8197b10d356236acb2c31be6031b95caf2d7492e2744b176bf8a4a357cb70110f22c1178f5c734e83134432c2f5c76cb6462ccba9db0177640cde08b5413ce09630a9c0d5682ee2a1acca1f5d0a6a3583b9578c6e0fbb2d489e252ec7e5960a90011d984560f66ce62be4ba2512e2d62777429f37d6020f9dcb9a0ac54522f80462b4ff33ab5c832748e50cda01e34eef28271982ac22b216cac2a6bde33a83f6bfd011207131b4a1ab2f2ed984cd444210c5c4147d5da72b27d1fdbf6f1a087141ab6971b20175fd67abc937ad69a42991b780804e67e926a8ca2b218521d6572c394c100686ed88a00000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa71000000000894a31a014155575600000000000da2316b00002710d957df1a464d0193bc0c9dd3b555d0544a04623e010055003fa4252848f9f0a1480be62745a4629d9eb1322aebab8a791e344b3b9c1adcf50000000002181de10000000000008db7fffffff800000000686ed88a00000000686ed88a00000000021501d40000000000008b300c29ff39535a48e8f09021a1fee7b9e887d68522dd790970609044b11d98aa7d4beb0d1e390c89ccad2fda83fd5316ad4483fc398b6534be617d42690cc27297ccbf19315c79064275612a0d16a2536fdafaca0648bd28b54a014a468906203c8a9d3deadd4ec12dd380bdd27f9a9bb41a5e841d23671743da3125f40b479518be5250080ac78df8826fb59d02dd07b310b69f954dea12b87cb5aa66af75d3da3f7327578f8ed0c0a7b98d1becad74b16e03ff52eee04497971d9985fd9cc05215490b44499df2c3a64f6fefa743421d947d34de37e185b242db065c8f89e9bb028a3710646273f0721e26c68dbd85fb20";
    let hex_str_update_2 = "504e41550100000003b801000000040d0239010392dab908eb9903d480abf8118d887f2a0c5eaeb9062e6eabab86c1b382127604c63358a7266cc5bade7726e159403c2bf317c7b3a4d8b489bfad4e334301031823d70352d3260226cbdddab0cf7d1584c0e1d23d4358ed12f9620e18a0db2154fbb096ac4cb8d5728e2cecf2b1398d7b9b51954f3fb8b4f59990ce017b0260000495e2691d8e6a0537d8ab3f41b5eb655acde7fbeaea0fdbe1f582383680f54c8a3a697c2c0f8b4110422f1b6beb0bfb601c929148b54dbf85fb19c333ccbb833c00066993a56c5980bf17d2790b933861fffb1fd09618921a90db4ab82cc8b148301f1a55d804d14cb39f648fdb0ef8c9ef1e24edc38d30f2aea7151025240a614bca0008a64a366c59bd6c4ce9d24a0e3beef2a33d28546826b1b969af184a257d648aab5672ad8a9eaf14473da40327e12e5c18168892bcebd693c8bed3df8ee50b85db010a36daa7c639c412969283f83749af93aef2464b27b83914b6026b721a59c8a04446a655686725247bd9154c71ca66505719df5867f775863a788d8bffb1bd637c000b237772560d72da81a782e89b138caf8bf1221b929ead77ca7d178b7b7af1c9141d9e77e22c98fe41b819f023695e6feed6f5215a5cdb6436bf52dc3c4c93e309010c89f2f3c64a8c77ccea47448e7871bbd70b59ed5761e5677458dbe6f82796efa2399e9ad9bf846d88d4688f1d19f9e2adeb2299017baf015c36a811d05c539b86000d6ba11d2f9a0edfd3a4bc23024d18dd010a83803faa79d40aec10a4deee40e8dd3c4c5401118b67bd6d879683cae3ea83d4f9afa744c655775615a7ce34237a02000e09a554d70c0f8e57bb79ce41552e38b836ad7b6bd1967e60c880f831341ad412699e4a9f5346713a6db2c7032bb7d1b3cc8e42f49ba17000f9d0916a13f2debf000f1ce88af88b96aaeb0104d4c966303eb9609df1b851a0d6149d05bba82f3fd70820a26d7f9d6fe18a7653fd3e3eda94fd9184726dadd2e8d58d09a8473e919f0800104583407293c41bef15c05ac20fc45fd5f9d00639c5b1f738d1ba42cd290fe5291e05219cefa8568806bfc1de76bcf5f799c90c9c6dd54bd69f9d459e994acb7a00110638c8067b42005ae678a7619e9eaad5fb66f0630547ab252179668e60b738c479ba6ff7e1f3dcffddab15e1bfebf93e0e4cb051535bdda3ecef6620aea32132016866e56400000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa710000000008813690014155575600000000000d8ec4750000271098d4f856e398eb41afbd0f2b24ad80e58b1f57b601005500e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43000009fdcc9378c600000001105b4d5afffffff8000000006866e564000000006866e564000009fbf79e7bc000000000e99c0d1c0c02b95abadee324fbb6534576de1507c74c8ddef2b928c314cb3d4978a5ada03db907df05ba0fc051e659facec6479c324c276e5098fde9dcae0b462cd32d9e2e5b617b51ced85d38a8456022f3ab370d3c45a07acb686cfb39976b2f4bb1007a91e599951ed929f714a04dab0e6bd885a0c91a076f3b83ee8f765b70a3edda569876102f2c62cae15024e529a2e5e17c50411aa736c7511278a92f4d9cdda3239057c3a942a1365a58771734a982e41e1d7aa8bae87748f1becd045fcb5e1cb1993e978168147d6be8a2cba24a3cc8a2f78e7313f18c87ec2bb238510ebeb47aab50a449fd2ce3dc6b8c0d08d361c102";
    let bytes_1 = Vec::from_hex(hex_str_update_1).expect("Invalid hex string");
    let bytes_2 = Vec::from_hex(hex_str_update_2).expect("Invalid hex string");

    vec![bytes_1, bytes_2]
}

#[cfg(test)]
pub fn good_update1_results_full() -> ([u8; 32], U64, I32, I64, U64, I64, U64) {
    (
        good_update1_feed_id(),
        U64::from(1752170378u64),
        I32::from_le_bytes((-8i32).to_le_bytes()),
        I64::from_le_bytes(6512459i64.to_le_bytes()),
        U64::from(20759u64),
        I64::from_le_bytes(6423048i64.to_le_bytes()),
        U64::from(14961u64),
    )
}

#[cfg(test)]
pub fn good_update2_results_full() -> ([u8; 32], U64, I32, I64, U64, I64, U64) {
    (
        good_update1_feed_id(),
        U64::from(1752171074u64),
        I32::from_le_bytes((-8i32).to_le_bytes()),
        I64::from_le_bytes(6468786i64.to_le_bytes()),
        U64::from(12875u64),
        I64::from_le_bytes(6434624i64.to_le_bytes()),
        U64::from(14559u64),
    )
}

#[cfg(test)]
pub fn multiple_updates_results_full() -> [([u8; 32], U64, I32, I64, U64, I64, U64); 2] {
    [
        (
            multiple_updates_first_feed_id(),
            U64::from(1751573123u64),
            I32::from_le_bytes((-8i32).to_le_bytes()),
            I64::from_le_bytes(10990356724259i64.to_le_bytes()),
            U64::from(3891724259u64),
            I64::from_le_bytes(10974970400000i64.to_le_bytes()),
            U64::from(3918344000u64),
        ),
        (
            multiple_updates_second_feed_id(),
            U64::from(1751573123u64),
            I32::from_le_bytes((-8i32).to_le_bytes()),
            I64::from_le_bytes(258906787480i64.to_le_bytes()),
            U64::from(158498649u64),
            I64::from_le_bytes(258597182000i64.to_le_bytes()),
            U64::from(131285914u64),
        ),
    ]
}

#[cfg(test)]
pub fn multiple_updates_diff_vaa_results_full() -> [([u8; 32], U64, I32, I64, U64, I64, U64); 2] {
    [
        (
            multiple_updates_diff_first_feed_id(),
            U64::from(1752094858u64),
            I32::from_le_bytes((-8i32).to_le_bytes()),
            I64::from_le_bytes(35134945i64.to_le_bytes()),
            U64::from(36279u64),
            I64::from_le_bytes(34931156i64.to_le_bytes()),
            U64::from(35632u64),
        ),
        (
            multiple_updates_first_feed_id(),
            U64::from(1751573860u64),
            I32::from_le_bytes((-8i32).to_le_bytes()),
            I64::from_le_bytes(10985663592646i64.to_le_bytes()),
            U64::from(4569386330u64),
            I64::from_le_bytes(10977795800000i64.to_le_bytes()),
            U64::from(3919318300u64),
        ),
    ]
}

#[cfg(test)]
pub fn good_update1_results_get_price() -> (I64, U64, I32, U64) {
    (
        I64::from_le_bytes(6512459i64.to_le_bytes()),
        U64::from(20759u64),
        I32::from_le_bytes((-8i32).to_le_bytes()),
        U64::from(1752170378u64),
    )
}

#[cfg(test)]
pub fn good_update2_results_get_price() -> (I64, U64, I32, U64) {
    (
        I64::from_le_bytes(6468786i64.to_le_bytes()),
        U64::from(12875u64),
        I32::from_le_bytes((-8i32).to_le_bytes()),
        U64::from(1752171074u64),
    )
}

#[cfg(test)]
pub fn multiple_updates_results_get_price() -> [(I64, U64, I32, U64); 2] {
    [
        (
            I64::from_le_bytes(10990356724259i64.to_le_bytes()),
            U64::from(3891724259u64),
            I32::from_le_bytes((-8i32).to_le_bytes()),
            U64::from(1751573123u64),
        ),
        (
            I64::from_le_bytes(258906787480i64.to_le_bytes()),
            U64::from(158498649u64),
            I32::from_le_bytes((-8i32).to_le_bytes()),
            U64::from(1751573123u64),
        ),
    ]
}

#[cfg(test)]
pub fn multiple_updates_diff_vaa_results_get_price() -> [(I64, U64, I32, U64); 2] {
    [
        (
            I64::from_le_bytes(35134945i64.to_le_bytes()),
            U64::from(36279u64),
            I32::from_le_bytes((-8i32).to_le_bytes()),
            U64::from(1752094858u64),
        ),
        (
            I64::from_le_bytes(10985663592646i64.to_le_bytes()),
            U64::from(4569386330u64),
            I32::from_le_bytes((-8i32).to_le_bytes()),
            U64::from(1751573860u64),
        ),
    ]
}

#[cfg(test)]
pub fn current_guardians() -> Vec<Address> {
    vec![
        address!("0x5893B5A76c3f739645648885bDCcC06cd70a3Cd3"), // Rockaway
        address!("0xfF6CB952589BDE862c25Ef4392132fb9D4A42157"), // Staked
        address!("0x114De8460193bdf3A2fCf81f86a09765F4762fD1"), // Figment
        address!("0x107A0086b32d7A0977926A205131d8731D39cbEB"), // ChainodeTech
        address!("0x8C82B2fd82FaeD2711d59AF0F2499D16e726f6b2"), // Inotel
        address!("0x11b39756C042441BE6D8650b69b54EbE715E2343"), // HashKey Cloud
        address!("0x54Ce5B4D348fb74B958e8966e2ec3dBd4958a7cd"), // ChainLayer
        address!("0x15e7cAF07C4e3DC8e7C469f92C8Cd88FB8005a20"), // xLabs
        address!("0x74a3bf913953D695260D88BC1aA25A4eeE363ef0"), // Forbole
        address!("0x000aC0076727b35FBea2dAc28fEE5cCB0fEA768e"), // Staking Fund
        address!("0xAF45Ced136b9D9e24903464AE889F5C8a723FC14"), // Moonlet Wallet
        address!("0xf93124b7c738843CBB89E864c862c38cddCccF95"), // P2P Validator
        address!("0xD2CC37A4dc036a8D232b48f62cDD4731412f4890"), // 01node
        address!("0xDA798F6896A3331F64b48c12D1D57Fd9cbe70811"), // MCF
        address!("0x71AA1BE1D36CaFE3867910F99C09e347899C19C3"), // Everstake
        address!("0x8192b6E7387CCd768277c17DAb1b7a5027c0b3Cf"), // Chorus One
        address!("0x178e21ad2E77AE06711549CFBB1f9c7a9d8096e8"), // Syncnode
        address!("0x5E1487F35515d02A92753504a8D75471b9f49EdB"), // Triton
        address!("0x6FbEBc898F403E4773E95feB15E80C9A99c8348d"), // Staking Facilities
    ]
}
